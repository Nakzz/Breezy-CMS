'use strict';

var utils = require('@keystone-alpha/utils');

const noop = () => {}; // A depth-first, top-down tree walking algorithm.


function visitNode(node, visitors) {
  const recurse = childNode => visitNode(childNode, visitors);

  let visitedNode = null; // Registered visitors might serialise a node.
  // If they do, it's their responsibility to also serialise all the child
  // nodes.
  // If they don't, they return falsey and we pass it to the default visitor to
  // handle.

  switch (node.object) {
    case 'document':
      {
        visitedNode = visitors.visitDocument(node, recurse);
        break;
      }

    case 'block':
      {
        visitedNode = visitors.visitBlock(node, recurse);
        break;
      }

    case 'inline':
      {
        visitedNode = visitors.visitInline(node, recurse);
        break;
      }

    case 'text':
      {
        visitedNode = visitors.visitText(node, recurse);
        break;
      }

    default:
      {
        throw new Error("Encountered unknown type '".concat(node.object, "' in Slate document"));
      }
  } // The node (and children) weren't serialised, so we'll use the default JSON
  // for this node, and recurse onto the child nodes.


  if (!visitedNode) {
    visitedNode = visitors.defaultVisitor(node, recurse);
  }

  return visitedNode;
}

function walkSlateNode(node, // visitors should return a JSON representation of the node and its
_ref) {
  let _ref$visitDocument = _ref.visitDocument,
      visitDocument = _ref$visitDocument === void 0 ? noop : _ref$visitDocument,
      _ref$visitBlock = _ref.visitBlock,
      visitBlock = _ref$visitBlock === void 0 ? noop : _ref$visitBlock,
      _ref$visitInline = _ref.visitInline,
      visitInline = _ref$visitInline === void 0 ? noop : _ref$visitInline,
      _ref$visitText = _ref.visitText,
      visitText = _ref$visitText === void 0 ? noop : _ref$visitText,
      _ref$defaultVisitor = _ref.defaultVisitor,
      defaultVisitor = _ref$defaultVisitor === void 0 ? utils.identity : _ref$defaultVisitor;
  return visitNode(node, {
    visitDocument,
    visitBlock,
    visitInline,
    visitText,
    defaultVisitor
  });
}

exports.walkSlateNode = walkSlateNode;
