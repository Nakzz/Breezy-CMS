import _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray';
import { useEffect, useState, useCallback } from 'react';

function useScrollListener(handler) {
  useEffect(() => {
    window.addEventListener('scroll', handler);
    return () => window.removeEventListener('scroll', handler);
  }, [handler]);
}

let isBrowser = typeof window !== 'undefined';

function getSize() {
  if (isBrowser) {
    return {
      innerHeight: window.innerHeight,
      innerWidth: window.innerWidth
    };
  }

  return {
    innerHeight: 0,
    innerWidth: 0
  };
}

function useWindowSize() {
  let _useState = useState(getSize()),
      _useState2 = _slicedToArray(_useState, 2),
      windowSize = _useState2[0],
      setWindowSize = _useState2[1];

  useEffect(() => {
    function handleResize() {
      setWindowSize(getSize());
    }

    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, [setWindowSize]);
  return windowSize;
}

function useStateWithEqualityCheck(initialValue) {
  let _useState = useState(initialValue),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      _setValue = _useState2[1];

  let setValue = useCallback(newValue => {
    if (newValue !== value) {
      _setValue(newValue);
    }
  }, [value]);
  return [value, setValue];
}

export { useStateWithEqualityCheck as a, useWindowSize as b, useScrollListener as c };
