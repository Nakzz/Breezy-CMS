'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _slicedToArray = _interopDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var core = require('@emotion/core');

var React = require('react');

var React__default = _interopDefault(React);

var reactPopper = require('react-popper');

var __chunk_4 = require('./chunk-3c8b2136.cjs.js');

let PopperRender = React.forwardRef((_ref, ref) => {
  let scheduleUpdate = _ref.scheduleUpdate,
      alignment = _ref.alignment,
      isFocused = _ref.isFocused,
      style = _ref.style,
      onAlignmentChange = _ref.onAlignmentChange;
  React.useLayoutEffect(scheduleUpdate, [alignment]);
  return core.jsx("div", {
    ref: ref,
    css: {
      display: isFocused ? 'block' : 'none',
      backgroundColor: 'black',
      padding: 8
    },
    style: style
  }, ['left', 'center', 'right'].map(align => {
    return core.jsx("button", {
      type: "button",
      key: align,
      onMouseDown: event => {
        // so that the image block doesn't get deselected
        event.preventDefault();
      },
      onClick: () => {
        onAlignmentChange(align);
      }
    }, align);
  }));
});
let popperModifiers = {
  flip: {
    enabled: false
  },
  hide: {
    enabled: false
  },
  preventOverflow: {
    enabled: false
  }
};

let Image = _ref2 => {
  let alignment = _ref2.alignment,
      attributes = _ref2.attributes,
      isFocused = _ref2.isFocused,
      src = _ref2.src,
      onAlignmentChange = _ref2.onAlignmentChange,
      props = _objectWithoutProperties(_ref2, ["alignment", "attributes", "isFocused", "src", "onAlignmentChange"]);

  let _useStateWithEquality = __chunk_4.useStateWithEqualityCheck(null),
      _useStateWithEquality2 = _slicedToArray(_useStateWithEquality, 2),
      referenceElement = _useStateWithEquality2[0],
      setReferenceElement = _useStateWithEquality2[1];

  return core.jsx("div", null, core.jsx("img", _extends({}, props, attributes, {
    src: src,
    ref: setReferenceElement,
    css: {
      width: '100%',
      outline: isFocused ? 'auto' : null
    }
  })), core.jsx(reactPopper.Popper, {
    modifiers: popperModifiers,
    placement: "top",
    referenceElement: referenceElement
  }, _ref3 => {
    let style = _ref3.style,
        ref = _ref3.ref,
        scheduleUpdate = _ref3.scheduleUpdate;
    return core.jsx(PopperRender, {
      scheduleUpdate,
      alignment,
      ref,
      isFocused,
      style,
      onAlignmentChange
    });
  }));
};
/** @jsx jsx */


let type = 'image';
let ImageAlignmentContext = React.createContext({
  aligment: '',

  onAlignmentChange() {}

});

function Node(props) {
  let data = props.node.data;

  let _React$useContext = React.useContext(ImageAlignmentContext),
      aligment = _React$useContext.aligment,
      onAlignmentChange = _React$useContext.onAlignmentChange;

  return core.jsx(Image, {
    alignment: aligment,
    attributes: props.attributes,
    isFocused: props.isFocused,
    src: data.get('src'),
    onAlignmentChange: onAlignmentChange
  });
}

let getSchema = () => ({
  isVoid: true
});

exports.type = type;
exports.ImageAlignmentContext = ImageAlignmentContext;
exports.Node = Node;
exports.getSchema = getSchema;
