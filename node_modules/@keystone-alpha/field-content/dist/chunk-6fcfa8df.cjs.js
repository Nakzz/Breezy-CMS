'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

require("@babel/runtime/helpers/objectWithoutProperties");

require("@babel/runtime/helpers/extends");

require('@emotion/core');

var __chunk_2 = require('./chunk-ea748c32.cjs.js');

var icons = require('@arch-ui/icons');

require('@arch-ui/theme');

require('@arch-ui/color-utils');

require('@arch-ui/tooltip');

require('@arch-ui/typography');

var __chunk_3 = require('./chunk-6384d08f.cjs.js');

var React = require('react');

var React__default = _interopDefault(React);

var paragraph_js = require('./chunk-b150bff8.cjs.js');

var listItem_js = require('./chunk-6d1df88b.cjs.js');

let handleListButtonClick = (editor, editorState, type) => {
  let isListItem = __chunk_2.hasBlock(editorState, listItem_js.type);

  let isOrderedList = __chunk_2.hasAncestorBlock(editorState, type);

  let otherListType = type === 'ordered-list' ? 'unordered-list' : 'ordered-list';

  if (isListItem && isOrderedList) {
    editor.setBlocks(paragraph_js.type);
    editor.unwrapBlock(type);
  } else if (isListItem) {
    editor.unwrapBlock(otherListType);
    editor.wrapBlock(type);
  } else {
    editor.setBlocks(listItem_js.type).wrapBlock(type);
  }

  editor.focus();
};

let type = 'ordered-list';

function ToolbarElement(_ref) {
  let editor = _ref.editor,
      editorState = _ref.editorState;
  return React.createElement(__chunk_3.ToolbarButton, {
    label: "Ordered List",
    icon: React.createElement(icons.ListOrderedIcon, null),
    isActive: __chunk_2.hasAncestorBlock(editorState, type),
    onClick: () => {
      handleListButtonClick(editor, editorState, type);
    }
  });
}

function Node(_ref2) {
  let attributes = _ref2.attributes,
      children = _ref2.children;
  return React.createElement("ol", attributes, children);
}

let getPlugins = () => [{
  onKeyDown(event, editor, next) {
    // make it so when you press enter in an empty list item,
    // the block type will change to a paragraph
    if (event.keyCode === 13 && __chunk_2.hasAncestorBlock(editor.value, type) && editor.value.focusText.text === '') {
      editor.setBlocks(paragraph_js.type).unwrapBlock(type);
      return;
    }

    next();
  }

}];

const getSchema = () => ({
  nodes: [{
    match: {
      type: listItem_js.type
    },
    min: 0
  }],

  normalize(editor, error) {
    switch (error.code) {
      case 'child_type_invalid':
        {
          editor.unwrapBlockByKey(error.node.key, type);
          return;
        }
    }
  }

});

exports.type = type;
exports.ToolbarElement = ToolbarElement;
exports.Node = Node;
exports.getPlugins = getPlugins;
exports.getSchema = getSchema;
