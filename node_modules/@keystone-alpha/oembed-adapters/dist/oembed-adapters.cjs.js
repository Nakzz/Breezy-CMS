'use strict';

var _join = require("path").join;

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _slicedToArray = _interopDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread"));

var fetch = _interopDefault(require('node-fetch'));

var crypto = _interopDefault(require('crypto'));

const VALID_URL = /^https?:\/\//i;
const IS_MD5 = /[a-f0-9]{32}/i;

class IframelyOEmbedAdapter {
  constructor(_ref) {
    let apiKey = _ref.apiKey;

    if (!apiKey) {
      throw new Error('Must provide an apiKey to IFramely OEmbed Adapter');
    } // We send the MD5 version of the apiKey
    // https://iframely.com/docs/allow-origins


    if (IS_MD5.test(apiKey)) {
      this.apiKey = apiKey;
    } else {
      this.apiKey = crypto.createHash('md5').update(apiKey).digest('hex');
    }
  }
  /**
   * @param paramters{Object} An object of paramters to be sent to the IFramely
   * service. See more: https://iframely.com/docs/parameters
   * @param parameters.url{String} (required) The url to fetch oEmbed data for.
   */


  fetch() {
    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // IFramely suggests sending only http(s) URLs:
    // https://iframely.com/docs/providers

    if (!VALID_URL.test(parameters.url)) {
      return Promise.reject(new Error('url passed to IFramely OEmbed Adapter must start with either http:// or https://'));
    }

    const params = Object.entries(_objectSpread({
      // Force all `html` to be returned as an iFramely iFrame:
      // https://iframely.com/docs/iframes
      iframe: '1',
      // Assume the client will load the script themselves. This is important
      // for React apps.
      // https://iframely.com/docs/reactjs
      omit_script: '1'
    }, parameters, {
      // We're using the MD5 hashed key:
      // https://iframely.com/docs/allow-origins
      key: this.apiKey
    })).map(_ref2 => {
      let _ref3 = _slicedToArray(_ref2, 2),
          key = _ref3[0],
          value = _ref3[1];

      return "".concat(key, "=").concat(encodeURIComponent(value));
    });
    return fetch("https://iframe.ly/api/oembed?".concat(params.join('&'))).then(res => res.json());
  }

  getAdminViews() {
    return [_join(__dirname, "1yp1mps")];
  }

  getViewOptions() {
    return {
      previewComponent: _join(__dirname, "1yp1mps"),
      // NOTE: This is the md5'd API key from the constructor, which is ok to
      // put on the client according to the docs
      clientApiKey: this.apiKey
    };
  }

}

exports.IframelyOEmbedAdapter = IframelyOEmbedAdapter;
