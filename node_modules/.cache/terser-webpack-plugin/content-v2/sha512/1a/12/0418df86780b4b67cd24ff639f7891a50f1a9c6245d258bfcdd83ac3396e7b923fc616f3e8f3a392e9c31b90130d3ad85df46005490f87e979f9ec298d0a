{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{207:function(t,e,a){\"use strict\";a.r(e);var n=a(6),c=a(201);e.default=class extends c.a{constructor(){super(...arguments),Object(n.a)(this,\"getFilterGraphQL\",t=>{let e=t.type,a=t.value;switch(e){case\"is\":return\"\".concat(this.path,': \"').concat(a,'\"');case\"not\":return\"\".concat(this.path,'_not: \"').concat(a,'\"');case\"in\":return\"\".concat(this.path,\"_in: [\").concat(a.split(\",\").map(t=>'\"'.concat(t.trim(),'\"')).join(\",\"),\"]\");case\"not_in\":return\"\".concat(this.path,\"_not_in: [\").concat(a.split(\",\").map(t=>'\"'.concat(t.trim(),'\"')).join(\",\"),\"]\")}}),Object(n.a)(this,\"getFilterLabel\",t=>{let e=t.label,a=t.type,n=\"\";return[\"in\",\"not_in\"].includes(a)&&(n=\" (comma separated)\"),\"\".concat(this.label,\" \").concat(e.toLowerCase()).concat(n)}),Object(n.a)(this,\"formatFilter\",t=>{let e=t.label,a=t.type,n=t.value,c=n;return[\"in\",\"not_in\"].includes(a)&&(c=n.split(\",\").map(t=>t.trim()).join(\", \")),\"\".concat(this.label,\" \").concat(e.toLowerCase(),\": \").concat(c)}),Object(n.a)(this,\"getFilterTypes\",()=>[{type:\"is\",label:\"Is exactly\",getInitialValue:()=>\"\"},{type:\"not\",label:\"Is not\",getInitialValue:()=>\"\"},{type:\"in\",label:\"Is one of\",getInitialValue:()=>\"\"},{type:\"not_in\",label:\"Is not one of\",getInitialValue:()=>\"\"}])}}}}]);","extractedComments":[]}