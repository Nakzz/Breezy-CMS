{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{701:function(t,e,a){\"use strict\";a.r(e);a(29);var l=a(6),i=(a(208),a(207));e.default=class extends i.a{constructor(){super(...arguments),Object(l.a)(this,\"getFilterGraphQL\",t=>{let e=t.type,a=t.value;const l=\"is\"===e?\"\".concat(this.path):\"\".concat(this.path,\"_\").concat(e);return\"\".concat(l,': \"').concat(a,'\"')}),Object(l.a)(this,\"getFilterLabel\",t=>{let e=t.label;return\"\".concat(this.label,\" \").concat(e.toLowerCase())}),Object(l.a)(this,\"formatFilter\",t=>{let e=t.label,a=t.value;return\"\".concat(this.getFilterLabel({label:e}),': \"').concat(a,'\"')}),Object(l.a)(this,\"serialize\",t=>{let e=t[this.path];return\"string\"!=typeof e?null:e.trim()||null}),Object(l.a)(this,\"getFilterTypes\",()=>[{type:\"is\",label:\"Is exactly\",getInitialValue:()=>\"\"},{type:\"not\",label:\"Is not exactly\",getInitialValue:()=>\"\"},{type:\"gt\",label:\"Is after\",getInitialValue:()=>\"\"},{type:\"lt\",label:\"Is before\",getInitialValue:()=>\"\"},{type:\"gte\",label:\"Is after or equal to\",getInitialValue:()=>\"\"},{type:\"lte\",label:\"Is before or equal to\",getInitialValue:()=>\"\"}])}}}}]);","extractedComments":[]}