{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{229:function(t,e,n){\"use strict\";n.r(e);var a=n(9),i=(n(29),n(6)),o=(n(202),n(201));e.default=class extends o.a{constructor(t){const e=\"defaultValue\"in t?t.defaultValue:null;for(var n=arguments.length,o=new Array(n>1?n-1:0),s=1;s<n;s++)o[s-1]=arguments[s];super(Object(a.a)({},t,{defaultValue:e}),...o),Object(i.a)(this,\"getFilterGraphQL\",t=>{let e=t.value,n=e.inverted,a=e.options;const i=a.length>1;let o=this.path;i&&n?o=\"\".concat(this.path,\"_not_in\"):i?o=\"\".concat(this.path,\"_in\"):n&&(o=\"\".concat(this.path,\"_not\"));const s=i?a.map(t=>t.value).join(\",\"):a[0].value;return\"\".concat(o,\": \").concat(s)}),Object(i.a)(this,\"getFilterLabel\",()=>this.label),Object(i.a)(this,\"formatFilter\",t=>{let e=t.value;if(!e.options.length)return e.inverted?\"\".concat(this.label,\" is set\"):\"\".concat(this.label,\" has no value\");if(e.options.length>1){const t=e.options.map(t=>t.label).join(\", \");return e.inverted?\"\".concat(this.label,\" is not in [\").concat(t,\"]\"):\"\".concat(this.label,\" is in [\").concat(t,\"]\")}const n=e.options[0].label;return e.inverted?\"\".concat(this.label,\" is not \").concat(n):\"\".concat(this.label,\" is \").concat(n)}),Object(i.a)(this,\"getFilterTypes\",()=>[{type:\"is\",label:\"Matches\",getInitialValue:()=>({inverted:!1,options:[]})}]),this.options=this.config.options}}}}]);","extractedComments":[]}