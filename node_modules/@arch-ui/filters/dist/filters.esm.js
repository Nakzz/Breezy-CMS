import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { jsx } from '@emotion/core';
import { Children } from 'react';
import { CheckboxGroup, Checkbox, RadioGroup, Radio } from 'react-radios';
import { colors } from '@arch-ui/theme';
import { CheckboxPrimitive, RadioPrimitive } from '@arch-ui/controls';
import { FlexGroup } from '@arch-ui/layout';

const ControlLabel = (_ref) => {
  let isChecked = _ref.isChecked,
      isDisabled = _ref.isDisabled,
      props = _objectWithoutProperties(_ref, ["isChecked", "isDisabled"]);

  const type = Children.toArray(props.children)[0].props.type;
  const borderRadius = type === 'checkbox' ? 3 : '2em';
  return jsx("label", _extends({
    css: {
      alignItems: 'center',
      border: "1px solid ".concat(colors.N10),
      borderRadius,
      display: 'flex',
      fontSize: '0.75em',
      fontWeight: 500,
      lineHeight: 1,
      transition: 'border-color 150ms linear',
      width: '100%',
      userSelect: 'none',
      ':hover, :focus': {
        borderColor: colors.N20
      },
      ':active': {
        backgroundColor: colors.N05
      }
    }
  }, props));
};

const StretchGroup = props => jsx(FlexGroup, _extends({
  stretch: true
}, props)); // checkbox


const CheckboxGroup$1 = props => jsx(CheckboxGroup, _extends({
  component: StretchGroup
}, props));

const ButtonCheckbox = props => jsx(CheckboxPrimitive, _extends({
  components: {
    Label: ControlLabel
  }
}, props));

const Checkbox$1 = props => jsx(Checkbox, _extends({
  component: ButtonCheckbox
}, props)); // radio

const RadioGroup$1 = props => jsx(RadioGroup, _extends({
  component: StretchGroup
}, props));

const ButtonRadio = props => jsx(RadioPrimitive, _extends({
  components: {
    Label: ControlLabel
  }
}, props));

const Radio$1 = props => jsx(Radio, _extends({
  component: ButtonRadio
}, props));

export { CheckboxGroup$1 as CheckboxGroup, Checkbox$1 as Checkbox, RadioGroup$1 as RadioGroup, Radio$1 as Radio };
